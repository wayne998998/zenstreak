import { chromium } from 'playwright';
import fs from 'fs';
import path from 'path';

const PROJECT_NAME = 'zenstreak';
const DOMAIN = `${PROJECT_NAME}.edgeone.site`;

async function connectAndDeploy() {
  console.log('üîå ËøûÊé•Âà∞Â∑≤ÊâìÂºÄÁöÑ Edge ÊµèËßàÂô®...\n');
  
  try {
    // Â∞ùËØïËøûÊé•Âà∞Â∑≤ËøêË°åÁöÑÊµèËßàÂô®
    // Edge ÈúÄË¶Å‰ª•Ë∞ÉËØïÊ®°ÂºèÂêØÂä®Ôºömsedge --remote-debugging-port=9222
    const browser = await chromium.connectOverCDP('http://localhost:9222');
    console.log('‚úÖ ÊàêÂäüËøûÊé•Âà∞ Edge ÊµèËßàÂô®ÔºÅ\n');
    
    // Ëé∑ÂèñÂΩìÂâçÈ°µÈù¢
    const contexts = browser.contexts();
    const pages = contexts[0].pages();
    const page = pages.find(p => p.url().includes('edgeone')) || pages[0];
    
    console.log('üìç ÂΩìÂâçÈ°µÈù¢:', page.url());
    
    // Á≠âÂæÖÈ°µÈù¢Âä†ËΩΩ
    await page.waitForLoadState('networkidle');
    
    // Ëé∑ÂèñË¶Å‰∏ä‰º†ÁöÑÊñá‰ª∂
    const distPath = path.join(process.cwd(), 'dist');
    const files = getAllFiles(distPath);
    console.log(`\nüì¶ ÂáÜÂ§á‰∏ä‰º† ${files.length} ‰∏™Êñá‰ª∂`);
    
    // Êü•ÊâæÂπ∂ÁÇπÂáªÂàõÂª∫Á´ôÁÇπÊåâÈíÆ
    console.log('\nüîç Êü•ÊâæÁ´ôÁÇπÂàõÂª∫ÊåâÈíÆ...');
    
    const createButtonSelectors = [
      'button:has-text("Êé•ÂÖ•Á´ôÁÇπ")',
      'button:has-text("ÂàõÂª∫Á´ôÁÇπ")',
      'button:has-text("Êñ∞Âª∫Á´ôÁÇπ")',
      'button:has-text("Ê∑ªÂä†Á´ôÁÇπ")',
      'a:has-text("ÂàõÂª∫Á´ôÁÇπ")',
      '.button:has-text("ÂàõÂª∫")'
    ];
    
    let createButtonClicked = false;
    for (const selector of createButtonSelectors) {
      try {
        const button = page.locator(selector).first();
        if (await button.isVisible({ timeout: 2000 })) {
          await button.click();
          console.log('‚úÖ ÁÇπÂáª‰∫ÜÂàõÂª∫Á´ôÁÇπÊåâÈíÆ');
          createButtonClicked = true;
          break;
        }
      } catch (e) {
        // ÁªßÁª≠Â∞ùËØï‰∏ã‰∏Ä‰∏™ÈÄâÊã©Âô®
      }
    }
    
    if (!createButtonClicked) {
      // ÂèØËÉΩÂ∑≤ÁªèÂú®Á´ôÁÇπÂÜÖÈÉ®
      console.log('‚ö†Ô∏è  Êú™ÊâæÂà∞ÂàõÂª∫ÊåâÈíÆÔºåÂèØËÉΩÂ∑≤Âú®Á´ôÁÇπÈ°µÈù¢');
      
      // Êü•ÊâæÊñá‰ª∂ÁÆ°ÁêÜÂÖ•Âè£
      const fileManagementSelectors = [
        'text=/Êñá‰ª∂ÁÆ°ÁêÜ/',
        'text=/Ê∫êÁ´ôÁÆ°ÁêÜ/',
        'text=/Êñá‰ª∂/',
        'a[href*="file"]',
        'button:has-text("Êñá‰ª∂")'
      ];
      
      for (const selector of fileManagementSelectors) {
        try {
          const link = page.locator(selector).first();
          if (await link.isVisible({ timeout: 2000 })) {
            await link.click();
            console.log('‚úÖ ËøõÂÖ•Êñá‰ª∂ÁÆ°ÁêÜ');
            break;
          }
        } catch (e) {
          // ÁªßÁª≠
        }
      }
    } else {
      // Á≠âÂæÖË°®ÂçïÂä†ËΩΩ
      await page.waitForTimeout(2000);
      
      // Â°´ÂÜôÁ´ôÁÇπ‰ø°ÊÅØ
      console.log('\nüìù Â°´ÂÜôÁ´ôÁÇπ‰ø°ÊÅØ...');
      
      // Á´ôÁÇπÂêçÁß∞
      try {
        await page.fill('input[placeholder*="Á´ôÁÇπÂêçÁß∞"]', PROJECT_NAME);
        console.log(`‚úÖ Á´ôÁÇπÂêçÁß∞: ${PROJECT_NAME}`);
      } catch (e) {
        console.log('‚ö†Ô∏è  Êó†Ê≥ïËá™Âä®Â°´ÂÜôÁ´ôÁÇπÂêçÁß∞');
      }
      
      // ÂüüÂêç
      try {
        await page.fill('input[placeholder*="ÂüüÂêç"]', DOMAIN);
        console.log(`‚úÖ ÂüüÂêç: ${DOMAIN}`);
      } catch (e) {
        console.log('‚ö†Ô∏è  Êó†Ê≥ïËá™Âä®Â°´ÂÜôÂüüÂêç');
      }
      
      // ÈÄâÊã©ÈùôÊÄÅÊâòÁÆ°
      try {
        await page.click('text=/ÈùôÊÄÅ/');
        console.log('‚úÖ ÈÄâÊã©ÈùôÊÄÅÊâòÁÆ°');
      } catch (e) {
        console.log('‚ö†Ô∏è  ËØ∑ÊâãÂä®ÈÄâÊã©ÈùôÊÄÅÊâòÁÆ°Á±ªÂûã');
      }
      
      // Êèê‰∫§
      const submitSelectors = [
        'button:has-text("Á°ÆÂÆö")',
        'button:has-text("ÂàõÂª∫")',
        'button:has-text("‰∏ã‰∏ÄÊ≠•")',
        'button[type="submit"]'
      ];
      
      for (const selector of submitSelectors) {
        try {
          const button = page.locator(selector).first();
          if (await button.isVisible({ timeout: 1000 })) {
            await button.click();
            console.log('‚úÖ Êèê‰∫§ÂàõÂª∫ËØ∑Ê±Ç');
            break;
          }
        } catch (e) {
          // ÁªßÁª≠
        }
      }
      
      // Á≠âÂæÖÂàõÂª∫ÂÆåÊàê
      await page.waitForTimeout(5000);
    }
    
    // Êü•Êâæ‰∏ä‰º†ÊåâÈíÆ
    console.log('\nüîç Êü•ÊâæÊñá‰ª∂‰∏ä‰º†ÂäüËÉΩ...');
    
    // ËÆæÁΩÆÊñá‰ª∂ÈÄâÊã©Âô®ÁõëÂê¨
    page.once('filechooser', async (fileChooser) => {
      console.log('üìÅ Ê£ÄÊµãÂà∞Êñá‰ª∂ÈÄâÊã©Âô®ÔºÅ');
      console.log(`üì§ Ê≠£Âú®‰∏ä‰º† ${files.length} ‰∏™Êñá‰ª∂...`);
      await fileChooser.setFiles(files);
      console.log('‚úÖ Êñá‰ª∂Â∑≤ÈÄâÊã©ÔºåÁ≠âÂæÖ‰∏ä‰º†...');
    });
    
    // Â∞ùËØïËß¶ÂèëÊñá‰ª∂‰∏ä‰º†
    const uploadSelectors = [
      'button:has-text("‰∏ä‰º†")',
      'button:has-text("‰∏ä‰º†Êñá‰ª∂")',
      'button:has-text("Upload")',
      'input[type="file"]',
      '.upload-button',
      '[class*="upload"]'
    ];
    
    let uploadTriggered = false;
    for (const selector of uploadSelectors) {
      try {
        const element = page.locator(selector).first();
        if (await element.isVisible({ timeout: 2000 })) {
          if (selector.includes('input[type="file"]')) {
            // Áõ¥Êé•ËÆæÁΩÆÊñá‰ª∂
            await element.setInputFiles(files);
            console.log('‚úÖ Áõ¥Êé•ËÆæÁΩÆ‰∫ÜÊñá‰ª∂ËæìÂÖ•');
          } else {
            // ÁÇπÂáªÊåâÈíÆ
            await element.click();
            console.log('‚úÖ ÁÇπÂáª‰∫Ü‰∏ä‰º†ÊåâÈíÆ');
          }
          uploadTriggered = true;
          break;
        }
      } catch (e) {
        // ÁªßÁª≠
      }
    }
    
    if (!uploadTriggered) {
      console.log('\n‚ö†Ô∏è  Êó†Ê≥ïËá™Âä®Ëß¶Âèë‰∏ä‰º†ÔºåËØ∑ÊâãÂä®Êìç‰ΩúÔºö');
      console.log('1. ÁÇπÂáª"‰∏ä‰º†Êñá‰ª∂"ÊåâÈíÆ');
      console.log('2. ÈÄâÊã©‰ª•‰∏ãÁõÆÂΩï‰∏≠ÁöÑÊâÄÊúâÊñá‰ª∂Ôºö');
      console.log(`   ${distPath}`);
    } else {
      console.log('\n‚è≥ Á≠âÂæÖÊñá‰ª∂‰∏ä‰º†ÂÆåÊàê...');
      await page.waitForTimeout(10000);
    }
    
    // ÊòæÁ§∫‰∏ä‰º†ÁöÑÊñá‰ª∂ÂàóË°®
    console.log('\nüìã ÈúÄË¶Å‰∏ä‰º†ÁöÑÊñá‰ª∂Ôºö');
    files.forEach(file => {
      console.log(`   - ${path.relative(distPath, file)}`);
    });
    
    console.log('\n‚úÖ Ëá™Âä®ÂåñÊ≠•È™§Â∑≤ÂÆåÊàêÔºÅ');
    console.log('\nËØ∑Ê£ÄÊü•ÊµèËßàÂô®‰∏≠ÁöÑ‰∏ä‰º†Áä∂ÊÄÅÔºåÂ¶ÇÈúÄÊâãÂä®Êìç‰ΩúÔºö');
    console.log('1. Á°Æ‰øùÊâÄÊúâÊñá‰ª∂ÈÉΩÂ∑≤‰∏ä‰º†');
    console.log('2. ÂêØÁî® HTTPSÔºàÈÄöÂ∏∏ÈªòËÆ§ÂêØÁî®Ôºâ');
    console.log('3. ‰øùÂ≠òËÆæÁΩÆ');
    
    console.log('\nüåê ÈÉ®ÁΩ≤ÂÆåÊàêÂêéÔºåÊÇ®ÁöÑÁΩëÁ´ôÂ∞ÜÂèØËÆøÈóÆÔºö');
    console.log(`   https://${DOMAIN}`);
    
    // ‰øùÊåÅËøûÊé•
    console.log('\nÊåâ Ctrl+C Êñ≠ÂºÄËøûÊé•...');
    await new Promise(() => {});
    
  } catch (error) {
    if (error.message.includes('connect ECONNREFUSED')) {
      console.error('‚ùå Êó†Ê≥ïËøûÊé•Âà∞ Edge ÊµèËßàÂô®');
      console.log('\nËØ∑‰ΩøÁî®‰ª•‰∏ãÂëΩ‰ª§ÈáçÊñ∞ÂêØÂä® EdgeÔºö');
      console.log('Windows:');
      console.log('  ÂÖ≥Èó≠ÊâÄÊúâ Edge Á™óÂè£ÔºåÁÑ∂ÂêéËøêË°åÔºö');
      console.log('  msedge --remote-debugging-port=9222');
      console.log('\nmacOS:');
      console.log('  ÂÖ≥Èó≠ÊâÄÊúâ Edge Á™óÂè£ÔºåÁÑ∂ÂêéËøêË°åÔºö');
      console.log('  /Applications/Microsoft\\ Edge.app/Contents/MacOS/Microsoft\\ Edge --remote-debugging-port=9222');
      console.log('\nÁÑ∂ÂêéÈáçÊñ∞ËøêË°åÊ≠§ËÑöÊú¨„ÄÇ');
    } else {
      console.error('‚ùå ÈîôËØØ:', error.message);
    }
  }
}

// Ëé∑ÂèñÊâÄÊúâÊñá‰ª∂
function getAllFiles(dirPath, arrayOfFiles = []) {
  const files = fs.readdirSync(dirPath);
  
  files.forEach(file => {
    const filePath = path.join(dirPath, file);
    if (fs.statSync(filePath).isDirectory()) {
      arrayOfFiles = getAllFiles(filePath, arrayOfFiles);
    } else {
      arrayOfFiles.push(filePath);
    }
  });
  
  return arrayOfFiles;
}

// ËøêË°å
connectAndDeploy().catch(console.error);